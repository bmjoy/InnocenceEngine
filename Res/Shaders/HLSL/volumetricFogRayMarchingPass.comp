// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

Texture3D<float4> in_irradianceVolume : register(t0);
RWTexture3D<float4> out_result : register(u0);

SamplerState SamplerTypeLinear : register(s0);

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[7].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[7].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[7].numThreads.z)
	{
		float3 l_writeCoord = float3(input.dispatchThreadID);

		int l_stepCount = input.dispatchThreadID.z;
		float3 l_readCoord = l_writeCoord;
		l_readCoord.xy /= float2(64.0, 64.0);

		float3 l_irradiance = float3(0.0, 0.0, 0.0);

		for (int i = 0; i < l_stepCount; i++)
		{
			l_readCoord.z = float(i) / l_stepCount;
			l_irradiance += in_irradianceVolume.SampleLevel(SamplerTypeLinear, l_readCoord, 0).xyz;
		}

		float4 l_result = float4(l_irradiance, 1.0);

		out_result[l_writeCoord] = l_result;
	}
}